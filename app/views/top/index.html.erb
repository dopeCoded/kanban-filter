<style>
  /* カレンダーの外側のコンテナを中央配置にする */
  #calendar-container {
    display: flex;
    text-align: center;
    height: 100vh; /* ビューポートの高さに合わせる */
    width: 100%; /* コンテナの幅を100%に設定 */
    margin: 0 auto; /* 左右のマージンを自動に設定 */
  }

  /* カレンダーのスタイル */
  #calendar {
    margin: auto;
    border-collapse: collapse;
    height: 50vh; /* 画面の高さの半分 */
    width: 50vw; /* 画面の幅の半分 */
  }

  #calendar th, #calendar td {
    border: 1px solid #ddd;
    text-align: center;
    padding: 8px;
  }

  #calendar th {
    background-color: #f0f0f0;
  }
  /* カレンダーの数字の背景を白に設定 */
  #calendar td {
    background-color: white;
  }

  #calendar th, #calendar td {
    border: 1px solid #ddd;
    text-align: center;
    padding: 8px;
  }

  /* 画面サイズが小さい場合のスタイル */
  @media (max-width: 600px) {
    #calendar th, #calendar td {
      height: 70px; /* セルの最小の高さを小さくする */
      width: 120px; /* セルの最小の幅を小さくする */
      font-size: 12px; /* フォントサイズを小さくする */
    }
  }

  /* 画面サイズが中程度の場合のスタイル */
  @media (min-width: 601px) and (max-width: 1024px) {
    #calendar th, #calendar td {
      height: 80px; /* セルの最小の高さを中間のサイズにする */
      width: 160px; /* セルの最小の幅を中間のサイズにする */
      font-size: 14px; /* フォントサイズを中間のサイズにする */
    }
  }

  /* 画面サイズが大きい場合のスタイル */
  @media (min-width: 1025px) {
    #calendar th, #calendar td {
      height: 90px; /* セルの最小の高さを大きくする */
      width: 200px; /* セルの最小の幅を大きくする */
      font-size: 18px; /* フォントサイズを大きくする */
    }
  }

  /* 土曜日の数字を青色に設定 */
  #calendar .saturday {
    color: blue;
  }

  /* 日曜日の数字を赤色に設定 */
  #calendar .sunday {
    color: red;
  }

  /* タスク表示部分のスタイル */
  #calendar td div:nth-child(2) {
    margin-top: 5px; /* 日付との間隔 */
  }

  /* カード詳細リンクのスタイル */
  .cardDetail_link {
    display: block;
    color: black;
    text-decoration: none;
    margin-top: 5px;
  }
  body{font-family: "Lato"; margin:0; padding: 0;}
  #myKanban{overflow-x: auto; padding:20px 0;}
  
  .success{background: #00B961; color:#fff}
  .info{background: #2A92BF; color:#fff}
  .warning{background: #F4CE46; color:#fff}
  .error{background: #FB7D44; color:#fff}
  text-decoration: none;
  svg {
      color: gray !important;
  }

  .addCard_link {
      color: gray;
  }

  .kanban-title-board a {
    color: white;
    text-decoration: none;
  }
  .topPage {
    display: none;
  }

</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jkanban@1.3.1/dist/jkanban.min.css">
<script src="https://cdn.jsdelivr.net/npm/jkanban@1.3.1/dist/jkanban.min.js"></script>

<div class="container-fluid">
  <button id="toggleCalendar" type="button">カレンダーを表示/非表示</button>
  <div id="currentMonth"></div>

  <button id="prev" type="button">前の月</button>
  <button id="next" type="button">次の月</button>
  <div id="calendar-container">
    <div id="calendar"></div>
  </div>
   <div class="row">
      <div class="col-md-12">
         <div id="myKanban"></div>
      </div>
   </div>
</div>

<div class="topPage">

  <div class="listWrapper">
    <% @lists.each do |list| %>
      <div class="list kanban-board" data-list-id="<%= list.id %>" data-list-title="<%= list.title.downcase %>">
        <div class="list_header">
          <h2 class="list_header_title"><%= list.title %></h2>

          <div class="list_header_action">
            <%= link_to content_tag(:i, '', class: 'fas fa-trash'), list, method: :delete, data: { confirm: "#{list.title}を削除して大丈夫ですか？" } %>
            <%= link_to(content_tag(:i, '', class: 'fas fa-pen'), edit_list_path(list)) %>
          </div>
        </div>
        <div class="cardWrapper">
          <% list.cards.each do |card| %>
            <%= link_to list_card_path(list, card), class:"cardDetail_link" do %>
              <div class="card">
                <h3 class="card_title"><%= card.title %></h3>
                <% if card.memo.size > 0 %>
                  <div class="card_detail is-exist"><i class="fas fa-bars"></i></div>
                <% end %>
              </div>
            <% end %>
          <% end %>

          <div class="addCard">
            <i class="far fa-plus-square"></i>
            <%= link_to "さらにカードを追加", new_list_card_path(list), class: "addCard_link" %>
          </div>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    fetchListIds();
    var calendarContainer = document.getElementById('calendar-container');
    calendarContainer.style.display = 'none';
  });
  // カードのデータをJavaScriptの変数に格納
  // 各カードにリストのタイトルも含める
  var cardsData = <%= @lists.map { |list| list.cards.map { |card| { title: card.title, deadline: card.deadline, url: list_card_path(list, card), listTitle: list.title } } }.flatten.to_json.html_safe %>;
  var weeks = ['日', '月', '火', '水', '木', '金', '土'];
  var date = new Date();
  var year = date.getFullYear();
  var month = date.getMonth() + 1;

  // カレンダーを描画する関数
  function renderCalendar(year, month) {
    var calendar = document.getElementById('calendar');
    var currentMonth = document.getElementById('currentMonth');
    calendar.innerHTML = ''; // カレンダーをクリア

    // 現在の年月を表示
    currentMonth.textContent = `${year}年${month}月`;

    // ヘッダー行を追加
    var headerRow = document.createElement('tr');
    weeks.forEach(day => {
      var th = document.createElement('th');
      th.textContent = day;
      headerRow.appendChild(th);
    });
    calendar.appendChild(headerRow);

    // 日付の行を追加
    var firstDay = new Date(year, month - 1, 1);
    var lastDay = new Date(year, month, 0);
    var date = 1;
    for (var i = 0; i < 6; i++) { // 最大6週間
      var row = document.createElement('tr');
      for (var j = 0; j < 7; j++) {
        var cell = document.createElement('td');
        var dateDiv = document.createElement('div'); // 日付を表示するためのdiv
        var tasksDiv = document.createElement('div'); // タスクを表示するためのdiv

        if (i === 0 && j < firstDay.getDay() || date > lastDay.getDate()) {
          dateDiv.textContent = '';
        } else {
          dateDiv.textContent = date;
          if (j === 0) { // 日曜日
            cell.classList.add('sunday');
          } else if (j === 6) { // 土曜日
            cell.classList.add('saturday');
          }
          date++;
        }

        cell.appendChild(dateDiv);
        cell.appendChild(tasksDiv);

        var cellDate = new Date(year, month - 1, date - 1);
        cardsData.forEach(card => {
          var cardDate = new Date(card.deadline);
          // Doneリストにないカードのみ表示
          if (card.listTitle !== 'Done' && cardDate.getFullYear() === cellDate.getFullYear() &&
              cardDate.getMonth() === cellDate.getMonth() &&
              cardDate.getDate() === cellDate.getDate()) {
            var cardLink = document.createElement('a');
            cardLink.href = card.url;
            cardLink.textContent = card.title;
            cardLink.classList.add('cardDetail_link');
            tasksDiv.appendChild(cardLink);
          }
        });

        row.appendChild(cell);
      }
      calendar.appendChild(row);
      if (date > lastDay.getDate()) {
        break;
      }
    }
  }

  // 前の月へ移動
  document.getElementById('prev').addEventListener('click', () => {
    month--;
    if (month < 1) {
      year--;
      month = 12;
    }
    renderCalendar(year, month);
  });

  // 次の月へ移動
  document.getElementById('next').addEventListener('click', () => {
    month++;
    if (month > 12) {
      year++;
      month = 1;
    }
    renderCalendar(year, month);
  });

  // 初期のカレンダーを描画
  renderCalendar(year, month);

  // カレンダーの表示・非表示を切り替える関数
  function toggleCalendarVisibility() {
    //var calendar = document.getElementById('calendar');
    var calendar = document.getElementById('calendar-container');
    var currentMonth = document.getElementById('currentMonth');
    var prevButton = document.getElementById('prev');
    var nextButton = document.getElementById('next');

    // カレンダーと関連要素の表示状態を切り替える
    if (calendar.style.display === 'none') {
      calendar.style.display = 'block';
      currentMonth.style.display = 'block';
      prevButton.style.display = 'inline-block';
      nextButton.style.display = 'inline-block';
    } else {
      calendar.style.display = 'none';
      currentMonth.style.display = 'none';
      prevButton.style.display = 'none';
      nextButton.style.display = 'none';
    }
  }

  // ボタンのクリックイベントに関数を紐付け
  document.getElementById('toggleCalendar').addEventListener('click', toggleCalendarVisibility);
  
  // 初期状態ではカレンダーを非表示に設定
  toggleCalendarVisibility();

  function extractHref(htmlString) {
  var parser = new DOMParser();
  var doc = parser.parseFromString(htmlString, 'text/html');
  var href = doc.querySelector('a') ? doc.querySelector('a').getAttribute('href') : null;
  return href;
}

var cards = cardsData;

// Function to group cards by listTitle
function groupBy(list, keyGetter) {
    const map = new Map();
    list.forEach((item) => {
         const key = keyGetter(item);
         const collection = map.get(key);
         if (!collection) {
             map.set(key, [item]);
         } else {
             collection.push(item);
         }
    });
    return map;
}
var listIdMapping = {};
document.querySelectorAll('.kanban-board').forEach(function(board) {
    var listTitle = board.dataset.listTitle; // 'todo', 'doing', 'done', etc.
    var listId = board.dataset.listId;
    listIdMapping[listTitle] = listId;
    //console.log(listIdMapping); //
});
//console.log(listIdMapping);
function fetchListIds() {
  var xhr = new XMLHttpRequest();
  xhr.open('GET', '/list/ids', true);
  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      var lists = JSON.parse(xhr.responseText);
      lists.forEach(function(list) {
        listIdMapping['_' + list.title.toLowerCase()] = list.id;
      });
    }
  };
  xhr.send();
}

  var kanbanContainer = <%= @lists_user.to_json(only: [:id, :title, :order]).html_safe %>;
  kanbanContainer.sort((a, b) => a.order - b.order);
  var allLists = kanbanContainer.map((list, index) => {
    return {
        id: list.title.toLowerCase(), // Prefixing the id with an underscore for uniqueness
        //order: list.order
        title: list.title,
        class: index === 0 ? 'info' : (index === 1 ? 'warning' : 'success'), // Assigning classes based on the index
        item: [] // Assuming no items initially, can be populated later
    };
});
console.log("allLists");
console.log(allLists);
console.log(kanbanContainer);

  // Group cards by their listTitle
  var grouped = groupBy(cards, card => card.listTitle);

  // Map each list to a kanban board entry
  var result = allLists.map((list, index) => {
      var listCards = grouped.get(list.title) || []; // Get cards for the list, or an empty array if none

      // Sort cards by their position if any
      listCards.sort((a, b) => a.position - b.position);

      return {
          id: list.id, // Use list id for uniqueness
          title: list.title,
          class: 'info',
          item: listCards.map(card => {
              // Extracting the card ID from the URL
              var cardId = card.url.split('/').pop(); // Assuming URL format is '/list/8/card/9'

              return {
                  id: cardId, // Use the extracted card ID
                  title: `<a style="text-decoration: none; color: black !important" href="${card.url}">${card.title}</a>`
              };
          })
      };
  });
  console.log(listIdMapping);

  document.addEventListener('DOMContentLoaded', function() {
  var kanbanHeaders = document.querySelectorAll('.kanban-board-header');
  console.log(kanbanHeaders);

  kanbanHeaders.forEach(function(header) {
    // 各ヘッダー要素からリストIDを取得
    var listId = listIdMapping[header.parentNode.getAttribute('data-id')];
    console.log(listId);

    if (listId) {
      // タイトル要素を取得
      var titleElement = header.querySelector('.kanban-title-board');

      // 新しいリンク要素を作成
      var linkElement = document.createElement('a');
      linkElement.href = "/list/" + listId + "/edit"; // リンクの設定
      linkElement.textContent = titleElement.textContent; // タイトルテキストのコピー
      linkElement.style.textDecoration = 'none'; // 下線を削除
      linkElement.style.color = 'black'; // テキストの色を黒に設定

      // タイトル要素の内容をリンク要素で置き換え
      titleElement.textContent = ''; // タイトルのテキストをクリア
      titleElement.appendChild(linkElement); // リンクをタイトル要素に追加

      // ヘッダーにクリックイベントを追加
      header.addEventListener('click', function() {
        window.location.href = linkElement.href;
      });
    }
  });
});


document.addEventListener('DOMContentLoaded', function() {
    // ヘッダー要素を取得
    var kanbanHeader = document.querySelector('.kanban-board-header.info');

    // ヘッダーが存在する場合、クリックイベントを追加
    if (kanbanHeader) {
        kanbanHeader.addEventListener('click', function() {
            // リンクのURLを取得
            var linkUrl = kanbanHeader.querySelector('.kanban-title-board a').getAttribute('href');
            // リンクのURLに遷移
            window.location.href = linkUrl;
        });
    }
});

  
  function addCardButtonToKanbanDrag() {
    // kanban-dragの全ての要素を取得
    var kanbanDrags = document.querySelectorAll('.kanban-drag');

    kanbanDrags.forEach(function(dragArea) {
        // addCardのdivコンテナを作成
        var addCardDiv = document.createElement('div');
        addCardDiv.classList.add('addCard');

        // アイコンを含むSVG要素を作成
        var svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svgElement.classList.add('svg-inline--fa', 'fa-plus-square', 'fa-w-14');
        svgElement.setAttribute('aria-hidden', 'true');
        svgElement.setAttribute('focusable', 'false');
        svgElement.setAttribute('data-prefix', 'far');
        svgElement.setAttribute('data-icon', 'plus-square');
        svgElement.setAttribute('role', 'img');
        svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        svgElement.setAttribute('viewBox', '0 0 448 512');
        svgElement.setAttribute('color', 'gray');
        svgElement.innerHTML = '<path fill="currentColor" d="M352 240v32c0 6.6-5.4 12-12 12h-88v88c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-88h-88c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h88v-88c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v88h88c6.6 0 12 5.4 12 12zm96-160v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"></path>';

        // リンク要素を作成
        var linkElement = document.createElement('a');
        linkElement.classList.add('addCard_link');
        linkElement.textContent = 'カードを追加';
        linkElement.style.marginLeft = '5px';

        // kanban-drag要素が属するリストのIDを取得
        var listId = listIdMapping[dragArea.closest('.kanban-board').dataset.id];
        linkElement.href = `/list/${listId}/card/new`;

        // SVGとリンクをaddCardDivに追加
        addCardDiv.appendChild(svgElement);
        addCardDiv.appendChild(linkElement);

        // addCardDivをkanban-drag要素の最後に追加
        dragArea.appendChild(addCardDiv);
    });
}

document.addEventListener('DOMContentLoaded', function() {
  addCardButtonToKanbanDrag();
});


function updateCardList(cardId, newListId, newOrder) {
  console.log("Card ID:", cardId, "New List ID:", newListId, "New Order:", newOrder);
  var xhr = new XMLHttpRequest();
  var updateUrl = '/card/' + cardId + '/update_list'; // Replace with your actual update endpoint
  xhr.open('POST', updateUrl, true);
  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  xhr.setRequestHeader('X-CSRF-Token', getCSRFToken()); // Get CSRF token for Rails

  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
      console.log('Card list updated successfully');
    }
  };

  xhr.send(`list_id=${newListId}&order=${newOrder}`);
}

function getCSRFToken() {
  var metas = document.getElementsByTagName('meta');
  for (var i = 0; i < metas.length; i++) {
      if (metas[i].getAttribute('name') === "csrf-token") {
          return metas[i].getAttribute('content');
      }
  }
  return '';
}

  function updateListOrder() {
    var boardOrder = [];
    document.querySelectorAll('.kanban-board').forEach(function(board, index) {
      var listId = listIdMapping['_' + board.dataset.id];
      if (listId !== undefined) {
        boardOrder.push({
          id: listId,
          order: index
        });
      }
    });
    console.log("boardOrder");
    console.log(boardOrder);
    // サーバーに新しい順序を送信
    sendListOrderToServer(boardOrder);
  }

  function sendListOrderToServer(boardOrder) {
    // リクエストボディを準備
    const requestData = {
      list_order: boardOrder
    };

    // リクエストオプションを設定
    const requestOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': getCSRFToken() // CSRFトークンをヘッダーに追加
      },
      body: JSON.stringify(requestData)
    };

    // fetch APIを使用してサーバーにリクエストを送信
    fetch('/update-list-order', requestOptions)
      .then(response => response.json())
      .then(data => console.log('Success:', data))
      .catch((error) => console.error('Error:', error));
  }


  let Kanban = new jKanban({
    element : '#myKanban',
    gutter  : '10px',
    click : function(el){
        window.location.href = extractHref(el.innerHTML);
    },
    boards  :result,
    dragBoards: true, // リストのドラッグアンドドロップを有効にする
    dragendBoard: function(el) {
      // リストが移動された後の処理
      updateListOrder();
    },
    dragendEl: function (el) {
    var cardId = el.getAttribute('data-eid');
    var newListKey = el.parentNode.parentNode.dataset.id; // '_todo', '_doing', etc.
    var newListId = listIdMapping[newListKey];
    var listEl = el.parentNode; // ドロップされたカードの親要素（リスト）を取得
    var cardEls = listEl.getElementsByClassName('kanban-item'); // リスト内のすべてのカード要素を取得
    var newOrder = Array.from(cardEls).map(function(cardEl) {
        return cardEl.getAttribute('data-eid'); // カードのID（または他の識別子）を取得
    });

    //console.log(newOrder);
    //console.log(cardId);
    //console.log(newListKey);
    //console.log(newListId);

    if (cardId && newListId) {
        updateCardList(cardId, newListId, newOrder);
    } else {
        console.error("Error: Missing cardId or newListId");
    }
}

});

</script>
